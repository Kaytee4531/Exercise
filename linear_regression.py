# -*- coding: utf-8 -*-
"""Linear regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_tD_7btETL-aecTUTDFH5Y8l-V_U5Q0j

EX1
"""

import numpy as np
import matplotlib.pyplot as plt
import random

def get_column(data, index):
    result =[row[index] for row in data]
    return result

def prepare_data(file_name_dataset):
    data = np.genfromtxt(file_name_dataset, delimiter=',', skip_header=1).tolist()
    N = len(data)
    tv_data = get_column(data, 0)
    radio_data = get_column(data, 1)
    newspaper_data = get_column(data, 2)
    sales_data = get_column(data, 3)
    X = [tv_data, radio_data, newspaper_data]
    y = sales_data
    return X, y

X, y = prepare_data('advertising.csv')
list = [sum(X[0][:5]), sum(X[1][:5]), sum(X[2][:5]) , sum(y[:5])]
print (list)

"""EX2"""

def initialize_params():
    w1, w2, w3, b = ((0.016992259082509283 , 0.0070783670518262355 ,-0.002307860847821344 , 0))
    return w1, w2, w3, b

def predict(x1, x2, x3, w1, w2, w3, b):
    y_hat = w1 * x1 + w2 * x2 + w3 * x3 + b
    return y_hat

y = predict(x1=1, x2=1, x3=1 , w1=0, w2=0.5, w3 =0, b =0.5)
print(y)

def compute_loss_mse(y, y_hat):
    loss = (y - y_hat) ** 2
    return loss

l = compute_loss_mse(y_hat=1, y =0.5)
print(l)

def compute_loss_mae(y, y_hat):
    loss = abs(y - y_hat)
    return loss

def compute_gradient_wi(xi, y, y_hat):
    dl_wi = 2 * (y_hat - y) * xi
    return dl_wi

g_wi = compute_gradient_wi(xi =1.0, y=1.0, y_hat=0.5)
print(g_wi)

def compute_gradient_b(y, y_hat):
    dl_b = 2 * (y_hat - y)
    return dl_b

g_b = compute_gradient_b(y =2.0, y_hat=0.5)
print(g_b)

def update_weight_wi(wi, dl_wi, lr):
    wi = wi - lr * dl_wi
    return wi

after_wi = update_weight_wi(wi=1.0, dl_wi=-0.5, lr=1e-5)
print(after_wi)

def update_weight_b(b, dl_b, lr):
    b = b - lr * dl_b
    return b

after_b = update_weight_b(b=0.5, dl_b=-1.0, lr=1e-5)
print(after_b)

def implement_linear_regression(X_data, y_data, epoch_max = 50, lr = 1e-5):
    w1, w2, w3, b = initialize_params()

    losses = []
    N = len(y_data)
    for epoch in range(epoch_max):
        for i in range(N):
            x1 = X_data[0][i]
            x2 = X_data[1][i]
            x3 = X_data[2][i]
            y = y_data[i]

            y_hat = predict(x1, x2, x3, w1, w2, w3, b)

            loss = compute_loss_mse(y, y_hat)

            dl_dw1 = compute_gradient_wi(x1, y, y_hat)
            dl_dw2 = compute_gradient_wi(x2, y, y_hat)
            dl_dw3 = compute_gradient_wi(x3, y, y_hat)
            dl_db = compute_gradient_b(y, y_hat)

            w1 = update_weight_wi(w1, dl_dw1, lr)
            w2 = update_weight_wi(w2, dl_dw2, lr)
            w3 = update_weight_wi(w3, dl_dw3, lr)
            b = update_weight_b(b, dl_db, lr)

            losses.append(loss)
    return (w1, w2, w3, b, losses)

X, y = prepare_data('advertising.csv')
(w1, w2, w3, b, losses) = implement_linear_regression (X , y)
print(w1, w2, w3)
print(losses)

import matplotlib.pyplot as plt
plt.plot(losses[:100])
plt.xlabel("#iteration")
plt.ylabel("Loss")
plt.show()
plt.show()

tv = 19.2
radio = 35.9
newspaper = 51.3
X, y = prepare_data('advertising.csv')
(w1, w2, w3, b, losses) = implement_linear_regression(X, y, epoch_max=50, lr=1e-5)
sales = predict(tv, radio, newspaper, w1, w2, w3, b)
print(f'predicted sales is { sales }')

"""EX3"""

def implement_linear_regression_nsamples(X_data, y_data, epoch_max = 50, lr = 1e-5):
    losses = []
    w1, w2, w3, b = initialize_params()
    N = len(y_data)

    for epoch in range(epoch_max):
        loss_total = 0.0
        dw1_total = 0.0
        dw2_total = 0.0
        dw3_total = 0.0
        db_total = 0.0

        for i in range(N):
            x1 = X_data[0][i]
            x2 = X_data[1][i]
            x3 = X_data[2][i]
            y = y_data[i]

            y_hat = predict(x1, x2, x3, w1, w2, w3, b)

            loss = compute_loss_mae(y, y_hat)
            loss_total += loss

            dl_dw1 = compute_gradient_wi(x1, y, y_hat)
            dl_dw2 = compute_gradient_wi(x2, y, y_hat)
            dl_dw3 = compute_gradient_wi(x3, y, y_hat)
            dl_db = compute_gradient_b(y, y_hat)

            dw1_total += dl_dw1
            dw2_total += dl_dw2
            dw3_total += dl_dw3
            db_total += dl_db

        w1 = update_weight_wi(w1, dw1_total/N, lr)
        w2 = update_weight_wi(w2, dw2_total/N, lr)
        w3 = update_weight_wi(w3, dw3_total/N, lr)
        b = update_weight_b(b, db_total/N, lr)

        losses.append(loss_total/N)
    return (w1, w2, w3, b, losses)

X, y = prepare_data('advertising.csv')
(w1, w2, w3, b, losses) = implement_linear_regression_nsamples(X , y, 1000)
print(len(losses))
plt.plot(losses)
plt.xlabel("#epoch")
plt.ylabel("MAE Loss")
plt.show()

X, y = prepare_data('advertising.csv')
(w1, w2, w3, b, losses) = implement_linear_regression_nsamples(X , y, 1000)
print(w1, w2, w3)

"""EX4"""

import numpy as np
import matplotlib.pyplot as plt
import random

def prepare_data(file_name_dataset):
  data = np.genfromtxt(file_name_dataset, delimiter=',', skip_header=1).tolist()

  tv_data = get_column(data, 0)

  radio_data = get_column(data, 1)

  newspaper_data = get_column(data, 2)

  sales_data = get_column(data, 3)

  X = [[1, x1, x2, x3] for x1, x2, x3 in zip(tv_data, radio_data, newspaper_data)]
  y = sales_data
  return X,y

